@{
    ViewBag.Title = "Chat";
}

<div class="container">

    <form class="form-horizontal">
        <div class="form-group">
            <label for="displayname" class="col-sm-2 control-label">Your Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="displayname">
            </div>
        </div>
        <div class="form-group">
            <label for="to" class="col-sm-2 control-label">To</label>
            <div class="col-sm-10">
                <select class="form-control" id="to">
                    <option>All</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <label for="message" class="col-sm-2 control-label">Message</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="message" />
            </div>
        </div>       
        <p class="text-danger" id="validationMessage">Name or Message not specified.</p>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <input type="button" class="btn btn-primary" id="sendmessage" value="Send"/>
            </div>
        </div>
    </form>
   
    <div id="discussion"></div>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>

    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>

    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message, time) {
                // Add the message to the page.
                $('#discussion').append('<p> '+ htmlEncode(time) + ' <strong>' + htmlEncode(name) + '</strong>: ' + htmlEncode(message) + '</p>');
            };
            
            // Set initial focus to user name input box.
            $('#displayname').focus();

            // do not show thw validation message on app start
            $('#validationMessage').hide(400, function () {
                console.log('now is hidden');
            });

            // Start the connection.
            $.connection.hub.start().done(function () {
                // send on button click
                $('#sendmessage').click(function () {
                    doSend();
                });
                // send on Enter press
                $('#message').keypress(function (e) {
                    if (e.which == 13) {
                        doSend();
                    }
                });
            });

            var doSend = function () {
                var username = $('#displayname').val();
                var message = $('#message').val();
                var validationMessage = $('#validationMessage');

                if (username && message) {
                    // Call the Send method on the hub.
                    chat.server.send(username, message);
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                    $('#displayname').attr('disabled', true);
                    validationMessage.hide();
                }
                else {
                    validationMessage.show();
                }
            };
        });

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}